# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ test ]
#   push:
#     branches: [ master ]
#   pull_request:
#     branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: '0'
    
    - name: Get composer cache directory
      id: composercache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ${{ steps.composercache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
    
    - name: Install dependencies
      uses: MilesChou/composer-action/5.6/install@master
      with:
        args: install --no-dev
    
#     - name: Make manifest
#       uses: shivammathur/setup-php@v2
#       with:
#         php-version: '5.6'
    
    - name: Make dist folder
      run: mkdir dist

    - name: Make manifest
      run: php scripts/manifest.php 0.1.$(git rev-list --no-merges --count HEAD master)-alpha

    - name: Archive Release
      uses: thedoctor0/zip-release@master
      with:
        filename: 'dist/gmx-web.zip'
        exclusions: '.git/* .gitignore .gitkeep runtime/* uploads/* config.php router.php manifest.php dist/*'
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Changes in this Release
          - First Change
          - Second Change
        draft: false
        prerelease: false
  
    - name: GitHub Releases
      uses: fnkr/github-action-ghr@v1.3
      env:
        GHR_PATH: dist/
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
